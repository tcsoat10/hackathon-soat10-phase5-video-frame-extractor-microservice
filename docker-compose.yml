networks:
  video-frame-extractor-microservice-net:
    driver: bridge

services:
  video-frame-extractor-microservice-app:
    image: ${APP_NAME}:1.0
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PORT: ${APP_PORT}
    container_name: ${APP_NAME}
    networks:
      - video-frame-extractor-microservice-net
    depends_on:
      video-frame-extractor-microservice-mongodb:
        condition: service_healthy
      video-frame-extractor-microservice-redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ${STORAGE_BUCKET}:/app/bucket:rw
    ports:
      - "${APP_PORT}:${APP_PORT}"
    restart: always
    command: bash -c "./src/config/init_db/init_db.sh && poetry run uvicorn src.app:app --host 0.0.0.0 --port ${APP_PORT}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  celery-worker:
    image: ${APP_NAME}:1.0
    build:
      context: .
      dockerfile: Dockerfile
    container_name: video-frame-extractor-microservice-celery-worker
    networks:
      - video-frame-extractor-microservice-net
    depends_on:
      video-frame-extractor-microservice-mongodb:
        condition: service_healthy
      video-frame-extractor-microservice-redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ${STORAGE_BUCKET}:/app/bucket:rw
    environment:
      - PYTHONPATH=/app
      - CELERY_IMPORTS=src.worker
    command: poetry run celery -A src.config.celery_app.celery_app worker --loglevel=INFO
    restart: always

  celery-beat:
    image: ${APP_NAME}:1.0
    build:
      context: .
      dockerfile: Dockerfile
    container_name: video-frame-extractor-microservice-celery-beat
    networks:
      - video-frame-extractor-microservice-net
    depends_on:
      video-frame-extractor-microservice-mongodb:
        condition: service_healthy
      video-frame-extractor-microservice-redis:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app
    command: poetry run celery -A src.config.celery_app.celery_app beat --loglevel=INFO
    restart: always

  video-frame-extractor-microservice-redis:
    image: redis:7-alpine
    container_name: video-frame-extractor-microservice-redis
    networks:
      - video-frame-extractor-microservice-net
    ports:
      - "6379:6379"
    command: redis-server --requirepass "${REDIS_PASSWORD}"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  celery-flower:
    image: mher/flower:2.0
    container_name: video-frame-extractor-microservice-celery-flower
    networks:
      - video-frame-extractor-microservice-net
    depends_on:
      video-frame-extractor-microservice-redis:
        condition: service_healthy
    environment:
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@video-frame-extractor-microservice-redis:6379/0
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    command: celery flower --broker=redis://:${REDIS_PASSWORD}@video-frame-extractor-microservice-redis:6379/0 --port=5555 --address=0.0.0.0
    restart: always

  video-frame-extractor-microservice-mongodb:
    image: mongo:${MONGO_VERSION:-7.0}
    container_name: ${MONGO_CONTAINER_NAME:-mongodb}
    restart: always
    networks:
      - video-frame-extractor-microservice-net
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - video-frame-extractor-microservice-mongodb-data:/data/db
      - video-frame-extractor-microservice-mongodb-config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  video-frame-extractor-microservice-mongodb-data:
  video-frame-extractor-microservice-mongodb-config:
